description = "Project Manager Module $version"

defaultTasks "clean", "build"

buildscript {
    repositories {
        mavenLocal()
        mavenCentral()
        maven { url "https://plugins.gradle.org/m2" }
        maven { url "https://oss.sonatype.org/content/repositories/snapshots" }
    }

    dependencies {
        classpath "org.springframework.boot:spring-boot-gradle-plugin:${springBoot}"
        classpath "io.spring.gradle:dependency-management-plugin:0.6.0.RELEASE"
        classpath "org.standardout:gradle-versioneye-plugin:1.3.0"
        classpath "org.sonarsource.scanner.gradle:sonarqube-gradle-plugin:2.2.1"
    }
}

group project.group
version project.version

apply plugin: 'idea'
apply plugin: 'java'
apply plugin: 'org.springframework.boot'
apply plugin: 'project-report'
apply plugin: 'org.sonarqube'
apply plugin: 'jacoco'
apply plugin: 'war'

apply from: rootProject.file("tasks.gradle")

sourceCompatibility = JavaVersion.VERSION_1_8
targetCompatibility = JavaVersion.VERSION_1_8

repositories {
    mavenLocal()
    mavenCentral()
}

configurations {
    querydslapt
}

dependencies {
    providedRuntime("org.springframework.boot:spring-boot-starter-tomcat")

    compile "org.springframework.boot:spring-boot-starter-web",
            "org.springframework.boot:spring-boot-starter-data-jpa",
            "ch.qos.logback:logback-classic:$logbackClassicVersion",
            "ch.qos.logback:logback-core:$logbackClassicVersion",
            "org.projectlombok:lombok:$lombokVersion",
            "io.springfox:springfox-swagger2:$swaggerVersion",
            "io.springfox:springfox-swagger-ui:$swaggerVersion",
            "org.hsqldb:hsqldb:$hsqldbVersion"

    compile group: 'com.querydsl', name: 'querydsl-jpa', version: querydslVersion
    compile group: 'com.querydsl', name: 'querydsl-apt', version: querydslVersion
    compile group: 'com.querydsl', name: 'querydsl-core', version: querydslVersion

    querydslapt "com.querydsl:querydsl-apt:$querydslVersion"
}

idea {
    module {
        downloadJavadoc = true
        downloadSources = true
        sourceDirs += file("src/generated/qdslapt")
    }
}

bootRepackage {
    mainClass = 'io.stack.pj.Application'
}

sourceSets {
    generated {
        java {
            srcDirs = ["src/generated/qdslapt"]
        }
    }
    main {
        java {
            srcDirs += ['src/main/java']
        }
        resources {
            srcDirs += ['src/main/resources']
        }
    }
}

task generateQueryDSL(type: JavaCompile, group: 'build', description: 'Generates the QueryDSL query types') {
    source = sourceSets.main.java
    classpath = configurations.compile + configurations.querydslapt
    options.compilerArgs = [
            "-proc:only",
            "-processor", "com.querydsl.apt.jpa.JPAAnnotationProcessor"
    ]
    destinationDir = sourceSets.generated.java.srcDirs.iterator().next()
}

compileJava {
    dependsOn generateQueryDSL
    source generateQueryDSL.destinationDir
}

compileGeneratedJava {
    dependsOn generateQueryDSL
    options.warnings = false
    options.warnings = false
    classpath += sourceSets.main.runtimeClasspath
}

artifacts {
    archives sourcesJar
    archives javadocJar
}

war {
    archiveName = 'ROOT.war'
    manifest {
        attributes("Implementation-Title": project.name,
                "Implementation-Vendor": project.group,
                "Created-By": project.group,
                "Implementation-Date": java.time.ZonedDateTime.now(),
                "Implementation-Version": project.version)
    }
    exclude 'config/application.yml'
    exclude 'application.yml'
}

javadoc {
    failOnError = false
}

//Code sytle, standard reports
jacocoTestReport {
    reports {
        xml.enabled = true
        html.enabled = true
    }
}

sonarqube {
    properties {
        property "sonar.host.url", "http://10.13.212.200:9000"
        property "sonar.projectName", "Project-Manager"
        property "sonar.projectKey", "org.sonarqube:project-manager"
        property "sonar.dynamicAnalysis", "reuseReports"
        property "sonar.jacoco.reportPath", "${project.buildDir}/jacoco/test.exec"
    }
}